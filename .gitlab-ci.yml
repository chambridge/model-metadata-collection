stages:
  - metadata-extraction

variables:
  # Go configuration
  GO_VERSION: "1.24"
  
  # Project configuration
  MODELS_CATALOG_PATH: "data/models-catalog.yaml"

# Main job to extract model metadata
model-metadata-extraction:
  stage: metadata-extraction
  image: golang:${GO_VERSION}
  
  # Run only on main branch and scheduled pipelines
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  
  before_script:
    # Install required system dependencies
    - apt-get update -qq && apt-get install -y -qq git make podman curl jq
    
    # Set up Git configuration for automated commits
    - git config --global user.name "Model Metadata Bot"
    - git config --global user.email "model-metadata-bot@redhat.com"
    - git config --global init.defaultBranch main
    
    # Set up Go environment
    - go version
    - go env GOPROXY
    
    # Install project dependencies
    - make deps
    
    # Store the original catalog for comparison
    - |
      if [ -f "$MODELS_CATALOG_PATH" ]; then
        cp "$MODELS_CATALOG_PATH" "${MODELS_CATALOG_PATH}.original"
        echo "Stored original catalog for comparison"
      else
        echo "No existing catalog found - this will be treated as a new catalog"
        touch "${MODELS_CATALOG_PATH}.original"
      fi
    
    # Authenticate with Red Hat registry using service account
    - |
      if [ -n "$REDHAT_REGISTRY_SERVICE_ACCOUNT_NAME" ] && [ -n "$REDHAT_REGISTRY_SERVICE_ACCOUNT_TOKEN" ]; then
        echo "Authenticating with Red Hat registry..."
        echo "$REDHAT_REGISTRY_SERVICE_ACCOUNT_TOKEN" | podman login registry.redhat.io --username "$REDHAT_REGISTRY_SERVICE_ACCOUNT_NAME" --password-stdin
        echo "Registry authentication successful"
      else
        echo "Warning: Red Hat registry credentials not provided. Some features may be limited."
        exit 1
      fi
  
  script:
    # Run the metadata extraction process
    - echo "Starting model metadata extraction..."
    - make run
    - echo "Metadata extraction completed"
    
    # Check if catalog file was generated
    - |
      if [ -f "$MODELS_CATALOG_PATH" ]; then
        echo "Models catalog generated successfully at $MODELS_CATALOG_PATH"
        echo "Catalog file size: $(du -h $MODELS_CATALOG_PATH | cut -f1)"
        echo "Number of models processed: $(grep -c '^ *- name:' $MODELS_CATALOG_PATH || echo 'Unable to count')"
      else
        echo "Error: Models catalog was not generated at $MODELS_CATALOG_PATH"
        exit 1
      fi
    
    # Check for differences in the catalog
    - |
      if ! diff -q "$MODELS_CATALOG_PATH" "${MODELS_CATALOG_PATH}.original" > /dev/null 2>&1; then
        echo "Changes detected in models catalog!"
        
        # Generate timestamp for branch name
        TIMESTAMP=$(date +%s)
        BRANCH_NAME="models-catalog-${TIMESTAMP}"
        
        echo "Creating branch: $BRANCH_NAME"
        
        # Create and switch to new branch
        git checkout -b "$BRANCH_NAME"
        
        # Add the changed catalog file
        git add "$MODELS_CATALOG_PATH"
        
        # Create a meaningful commit message with stats
        OLD_COUNT=$(grep -c '^ *- name:' "${MODELS_CATALOG_PATH}.original" || echo '0')
        NEW_COUNT=$(grep -c '^ *- name:' "$MODELS_CATALOG_PATH" || echo '0')
        DIFF_COUNT=$((NEW_COUNT - OLD_COUNT))
        
        if [ $DIFF_COUNT -gt 0 ]; then
          CHANGE_DESC="Added $DIFF_COUNT new models"
        elif [ $DIFF_COUNT -lt 0 ]; then
          CHANGE_DESC="Removed $((DIFF_COUNT * -1)) models"
        else
          CHANGE_DESC="Updated existing model metadata"
        fi
        
        COMMIT_MSG="Update models catalog: $CHANGE_DESC

- Previous model count: $OLD_COUNT
- Current model count: $NEW_COUNT
- Net change: $DIFF_COUNT models

🤖 Generated with Claude Code (https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
        
        # Commit the changes
        git commit -m "$COMMIT_MSG"
        
        # Check if we have the required GitLab token
        if [ -z "$GITLAB_TOKEN" ]; then
          echo "❌ Error: GITLAB_TOKEN variable not set"
          echo "Please create a project access token with 'api' and 'write_repository' scopes"
          echo "and add it as a CI/CD variable named 'GITLAB_TOKEN'"
          exit 1
        fi
        
        # Configure git to use the access token for authentication
        git remote set-url origin "https://gitlab-ci-token:${GITLAB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
        
        # Push the new branch
        git push -o ci.skip origin "$BRANCH_NAME"
        
        # Create merge request using GitLab API
        MR_TITLE="Update models catalog: $CHANGE_DESC"
        MR_DESCRIPTION="## Summary

This merge request contains automatic updates to the models catalog generated by the CI pipeline.

### Changes
- **Previous model count:** $OLD_COUNT
- **Current model count:** $NEW_COUNT  
- **Net change:** $DIFF_COUNT models

### Details
The models catalog has been automatically updated based on the latest model metadata extraction run. This includes:
- Updated model metadata from container registries
- Refreshed HuggingFace collection data
- Quality-validated model information

### Review Notes
Please review the changes in \`$MODELS_CATALOG_PATH\` to ensure all model updates are expected and accurate.

---
🤖 **Automated Update:** This MR was created by the model metadata extraction CI pipeline.

Generated with [Claude Code](https://claude.ai/code)"
        
        # Create the merge request
        MR_RESPONSE=$(curl --silent --request POST \
          --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          --header "Content-Type: application/json" \
          --data "{
            \"source_branch\": \"$BRANCH_NAME\",
            \"target_branch\": \"$CI_DEFAULT_BRANCH\", 
            \"title\": \"$MR_TITLE\",
            \"description\": \"$MR_DESCRIPTION\",
            \"remove_source_branch\": true,
            \"squash\": true
          }" \
          "$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests")
        
        # Check if MR creation was successful
        if echo "$MR_RESPONSE" | jq -e '.web_url' > /dev/null 2>&1; then
          MR_URL=$(echo "$MR_RESPONSE" | jq -r '.web_url')
          echo "✅ Merge request created successfully!"
          echo "🔗 URL: $MR_URL"
        else
          echo "❌ Failed to create merge request"
          echo "Response: $MR_RESPONSE"
          exit 1
        fi
        
        echo "✅ Merge request created for catalog changes"
        echo "📊 Branch: $BRANCH_NAME"
        echo "📈 Model count: $OLD_COUNT → $NEW_COUNT ($DIFF_COUNT)"
        
      else
        echo "✅ No changes detected in models catalog - no action needed"
      fi
  
  # Cache Go modules for faster builds
  cache:
    key: go-modules-$CI_COMMIT_REF_SLUG
    paths:
      - .cache/go-build/
      - .cache/go-mod/
  
  # Save the generated catalog as an artifact
  artifacts:
    name: "model-metadata-catalog-$CI_COMMIT_SHORT_SHA"
    paths:
      - data/models-catalog.yaml
      - data/models-index.yaml
      - data/hugging-face-*.yaml
      - output/
    expire_in: 1 week
    reports:
      # Generate a brief report for the pipeline
      dotenv: metadata-report.env
  
  # Create environment report for pipeline summary
  after_script:
    - |
      if [ -f "$MODELS_CATALOG_PATH" ]; then
        MODEL_COUNT=$(grep -c '^ *- name:' $MODELS_CATALOG_PATH || echo '0')
        echo "EXTRACTED_MODELS=$MODEL_COUNT" > metadata-report.env
        echo "CATALOG_SIZE=$(du -h $MODELS_CATALOG_PATH | cut -f1)" >> metadata-report.env
        echo "EXTRACTION_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> metadata-report.env
      fi
  
  # Resource configuration for large-scale processing
  tags:
    - shared-podman
  
  # Timeout after 2 hours (model extraction can take time)
  timeout: 2h